#!/usr/bin/env perl
# vim:ft=perl
use strict;
use warnings;

use Digest;
use Getopt::Long;
use Data::Entropy::Algorithms qw/rand_bits/;
use LWP::UserAgent            qw//;
use JSON::PP                  qw/decode_json
                                 encode_json/;

use lib 'lib';
use lib '/app/lib';
use VCB::Format;
use VCB::Format::Standard;

{
	no warnings 'redefine';

	sub LWP::UserAgent::get_basic_credentials {
		#my ($self, $realm, $url) = @_;
		return $ENV{VCB_USERNAME}, $ENV{VCB_PASSWORD};
	}
}

my $ua = LWP::UserAgent->new(
	agent => 'vcb/0.1',
);

my $VCB_API = $ENV{VCB_API} || "http://127.0.0.1:3000";
$VCB_API =~ s{/+$}{};

sub find_user {
	my ($id) = @_;
	my $res = $ua->get("$VCB_API/v/admin/users");
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";

	my $users = decode_json($res->decoded_content)
		or die "oops: $!\n";

	for (@$users) {
		next unless $_->{id} eq $id or $_->{account} eq $id;
		return $_;
	}

	return undef;
}

my %OPT = (
	timeout => 60,
);
GetOptions(\%OPT, qw/
	images
	force
	timeout|T=i

	summary|s=s
	notes=s
	type|t=s
	dated=s

	display=s
	cohort=s
/);
if (!@ARGV) {
	print STDERR "USAGE: vcb COMMAND args...\n\n";
	print STDERR "Environment:\n\n";
	print STDERR"    VCB_API        Full HTTP(S) URL to the Vault.\n";
	print STDERR"    VCB_USERNAME   Your administrative account username.\n";
	print STDERR"    VCB_PASSWORD   Your administrative account password.\n";
	print STDERR "\n";
	print STDERR "Commands:\n\n";
	print STDERR "   fmt            Format an import file (on stdin) to VIF.\n";
	print STDERR "\n";
	print STDERR "   recache        Regenerate server-side Vault caches.\n";
	print STDERR "   sets           Print the list of sets (as JSON) known to the Vault.\n";
	print STDERR "   ingest         Ingest set data from Scryfall.\n";
	print STDERR "\n";
	print STDERR "   users          List all users.\n";
	print STDERR "   useradd        Create a new user.\n";
	print STDERR "   usermod        Update an existing user.\n";
	print STDERR "   bcrypt         Encrypt a password (passed as argv).\n";
	print STDERR "\n";
	print STDERR "   validate       Validate an import (from stdin) against server data.\n";
	print STDERR "   import         Import an import file (from stdin) into a users collection.\n";
	print STDERR "   collection     Export a user's collection to VIF (on stdout).\n";
	print STDERR "\n";
	print STDERR "   curl           Issue arbitrary HTTP requests, with authentication.\n";
	print STDERR "\n";
	exit 0;
}

$ua->timeout($OPT{timeout});
$| = 1;

my $command = shift @ARGV;

if ($command eq 'fmt') {
	my $all = VCB::Format->parse(do { local $/; <STDIN> });
	my %cards;
	my $n = 0;
	for my $card (@$all) {
		$n += $card->{quantity};
		my $key = join('//', $card->{name}, $card->{condition}, $card->{flags}, $card->{set});
		if (!$cards{$key}) {
			$cards{$key} = $card;
		} else {
			$cards{$key}{quantity} += $card->{quantity};
		}
	}
	print VCB::Format::Standard->format([map { $cards{$_} } sort keys %cards]);
	print "\n# $n total\n" if -t STDOUT;
	exit 0;
}

if ($command eq 'recache') {
	my $res = $ua->post("$VCB_API/v/admin/recache");
	if (!$res->is_success) {
		print "FAILED!\n";
		print $res->decoded_content;
		exit 1;
	}
	exit 0;
}

if ($command eq 'sets') {
	my $res = $ua->get("$VCB_API/sets.json");
	if (!$res->is_success) {
		print STDERR "FAILED!\n";
		print STDERR $res->decoded_content;
		exit 1;
	}
	print $res->decoded_content."\n";
	exit 0;
}

if ($command eq 'ingest') {
	my $rc = 0;

	for my $set (@ARGV) {
		print "ingesting set $set...";
		my $res = $ua->post("$VCB_API/v/admin/sets/$set/ingest".($OPT{images} ? '?faces=y'.($OPT{force} ? '&force=y' : '') : ''));
		if (!$res->is_success) {
			print "FAILED!\n";
			print $res->decoded_content;
			$rc = 1;
		} else {
			print "OK\n";
		}
	}
	exit $rc;
}

if ($command eq 'users') {
	my $res = $ua->get("$VCB_API/v/admin/users");
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";

	my $users = decode_json($res->decoded_content)
		or die "oops: $!\n";

	printf "%-36s  %-20s  %-20s  %-25s  %s\n", 'UUID', 'Account', 'Cohort', 'Joined', 'Active?';
	printf "%-36s  %-20s  %-20s  %-25s  %s\n", ("-" x 36), ("-" x 20), ("-" x 20), ("-" x 25), ("-" x 7);
	for my $user (@$users) {
		printf "%-36s  %-20s  %-20s  %-25s  %s\n",
			$user->{id},
			$user->{account},
			$user->{cohort} || 'public',
			$user->{joined_at},
			$user->{active} ? 'active' : 'INACTIVE';
	}
	exit 0;
}

if ($command eq 'validate') {
	my $vcb = do { local $/; <>; };
	my $res = $ua->put("$VCB_API/v/admin/collection/validate",
		'Content-Type' => 'application/json',
		Content => encode_json({
				vcb => $vcb
			}));
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";
	my $data = decode_json($res->decoded_content)
		or die "oops: $!\n";

	if ($data->{error}) {
		print $data->{error};
		for (@{$data->{errors}}) {
			print "- $_\n";
		}
		print scalar(@{$data->{errors}})." error(s) found\n";
		exit 1;
	}
	print $data->{ok};
	exit 0;
}

if ($command eq 'collection') {
	my $id = shift @ARGV
		or die "USAGE: vcb collection user\n";

	my $user = find_user($id)
		or die "Unable to find user '$id'...\n";

	my $res = $ua->get("$VCB_API/v/col/$user->{id}/collection.vcb");
	print STDERR $res->as_string;
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";

	printf "%s\n", $res->decoded_content;
	exit 0;
}

if ($command eq 'import') {
	my $id = shift @ARGV
		or die "USAGE: vcb import user <collection.vcb\n";

	my $user = find_user($id)
		or die "Unable to find user '$id'...\n";
	$user = $user->{id};

	my $t = $OPT{type} || 'buy';
	my $vcb = do { local $/; <>; };
	my $res = $ua->post("$VCB_API/v/admin/users/$user/changes",
		'Content-Type' => 'application/json',
		Content => encode_json({
				occurred_at => $OPT{dated} || 0,
				type        => $t,
				summary     => $OPT{summary} || 'Initial import',
				notes       => $OPT{notes} || 'imported via vcb command-line utility.',
				raw_gain    => $t eq 'sell' ? '' : $vcb,
				raw_loss    => $t ne 'sell' ? '' : $vcb,
			}));
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";
	my $data = decode_json($res->decoded_content)
		or die "oops: $!\n";

	if ($data->{error}) {
		print $data->{error};
		exit 1;
	}
	print $data->{ok};
	exit 0;
}

if ($command eq 'useradd') {
	@ARGV == 1 or die "USAGE: vcb useradd username\n";
	my ($user) = @ARGV;

	my $res = $ua->post("$VCB_API/v/admin/users",
		'Content-Type' => 'application/json',
		Content => encode_json({
			account => $user,
			display => $user,
		}));
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";
	my $data = decode_json($res->decoded_content)
		or die "oops: $!\n";

	if ($data->{error}) {
		print $data->{error};
		exit 1;
	}
	print $data->{ok}."\n\n";
	print "account:  $data->{created}{account}\n";
	print "password: $data->{created}{password}\n";
	exit 0;
}

if ($command eq 'usermod') {
	@ARGV == 1 or die "USAGE: vcb usermod username [options]\n";
	my ($user) = @ARGV;

	my $res = $ua->put("$VCB_API/v/admin/users/$user",
		'Content-Type' => 'application/json',
		Content => encode_json({
			display => $OPT{display} || '',
			cohort  => $OPT{cohort} || '',
		}));
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";
	my $data = decode_json($res->decoded_content)
		or die "oops: $!\n";

	if ($data->{error}) {
		print $data->{error};
		exit 1;
	}
	print $data->{ok}."\n\n";
	print "account:  $data->{updated}{account}\n";
	exit 0;
}

if ($command eq 'curl') {
	my ($method, $url) = @ARGV;
	if (!$url) {
		$url = $method;
		$method = 'GET';
	}
	$method = uc($method);

	if ($method eq 'GET') {
		my $res = $ua->get("$VCB_API$url");
		print $res->as_string;
		print "\n";
		exit $res->is_success ? 0 : 1;
	}
	print STDERR "unsupported method '$method'...\n";
	exit 1;
}

if ($command eq 'bcrypt') {
	my $pw = shift @ARGV
		or die "USAGE: vcb bcrypt 'password'\n";

	my $bc = Digest->new(
		'Bcrypt',
		cost => $ENV{VCB_DIGEST_BCRYPT_COST} || 12, # in range (0,31)
		salt => rand_bits(16*8),                    # 16 octets
	);

	$bc->add($pw);
	print $bc->settings.'$'.$bc->hexdigest."\n";
	exit 0;
}

print STDERR "Unrecognized command: $command\n";
exit 2;

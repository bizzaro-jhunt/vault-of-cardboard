#!/usr/bin/perl
use strict;
use warnings;

use Digest;
use Data::Entropy::Algorithms qw/rand_bits/;
use LWP::UserAgent            qw//;
use JSON::PP                  qw/decode_json
                                 encode_json/;

{
	no warnings 'redefine';

	sub LWP::UserAgent::get_basic_credentials {
		#my ($self, $realm, $url) = @_;
		return $ENV{VCB_USERNAME}, $ENV{VCB_PASSWORD};
	}
}

my $ua = LWP::UserAgent->new(
	agent => 'vcb/0.1',
);

my $VCB_API = $ENV{VCB_API} || "http://127.0.0.1:3000";
$VCB_API =~ s{/+$}{};

sub find_user {
	my ($id) = @_;
	my $res = $ua->get("$VCB_API/v/admin/users");
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";

	my $users = decode_json($res->decoded_content)
		or die "oops: $!\n";

	for (@$users) {
		next unless $_->{id} eq $id or $_->{account} eq $id;
		return $_;
	}

	return undef;
}

if (!@ARGV) {
	print STDERR "USAGE: vcb COMMAND args...\n";
	exit 0;
}

$| = 1;

my $command = shift @ARGV;

if ($command eq 'recache') {
	my $res = $ua->post("$VCB_API/v/admin/recache");
	if (!$res->is_success) {
		print "FAILED!\n";
		print $res->decoded_content;
		exit 1;
	}
	exit 0;
}

if ($command eq 'ingest') {
	my $rc = 0;

	for my $set (@ARGV) {
		print "ingesting set $set...";
		my $res = $ua->post("$VCB_API/v/admin/sets/$set/ingest");
		if (!$res->is_success) {
			print "FAILED!\n";
			print $res->decoded_content;
			$rc = 1;
		} else {
			print "OK\n";
		}
	}
	exit $rc;
}

if ($command eq 'users') {
	my $res = $ua->get("$VCB_API/v/admin/users");
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";

	my $users = decode_json($res->decoded_content)
		or die "oops: $!\n";

	for my $user (@$users) {
		printf "%s  %-20s  %s  %s\n",
			$user->{id},
			$user->{account},
			$user->{joined_at},
			$user->{active} ? 'active' : 'INACTIVE';
	}
	exit 0;
}

if ($command eq 'validate') {
	my $vcb = do { local $/; <>; };
	my $res = $ua->put("$VCB_API/v/admin/collection/validate",
		'Content-Type' => 'application/json',
		Content => encode_json({
				vcb => $vcb
			}));
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";
	my $data = decode_json($res->decoded_content)
		or die "oops: $!\n";

	if ($data->{error}) {
		print $data->{error};
		for (@{$data->{errors}}) {
			print "- $_\n";
		}
		print scalar(@{$data->{errors}})." error(s) found\n";
		exit 1;
	}
	print $data->{ok};
	exit 0;
}

if ($command eq 'collection') {
	my $id = shift @ARGV
		or die "USAGE: vcb collection user\n";

	my $user = find_user($id)
		or die "Unable to find user '$id'...\n";

	my $res = $ua->get("$VCB_API/v/col/$user->{id}/collection.vcb");
	print STDERR $res->as_string;
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";

	printf "%s\n", $res->decoded_content;
	exit 0;
}

if ($command eq 'import') {
	my $id = shift @ARGV
		or die "USAGE: vcb import user <collection.vcb\n";

	my $user = find_user($id)
		or die "Unable to find user '$id'...\n";
	$user = $user->{id};

	my $vcb = do { local $/; <>; };
	my $res = $ua->put("$VCB_API/v/admin/users/$user/collection",
		'Content-Type' => 'application/json',
		Content => encode_json({
				vcb => $vcb
			}));
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";
	my $data = decode_json($res->decoded_content)
		or die "oops: $!\n";

	if ($data->{error}) {
		print $data->{error};
		exit 1;
	}
	print $data->{ok};
	exit 0;
}

if ($command eq 'useradd') {
	@ARGV == 1 or die "USAGE: vcb useradd username\n";
	my ($user) = @ARGV;

	my $res = $ua->post("$VCB_API/v/admin/users",
		'Content-Type' => 'application/json',
		Content => encode_json({
			account => $user,
			display => $user,
		}));
	$res->is_success
		or die "oops: ".$res->decoded_content."\n";
	my $data = decode_json($res->decoded_content)
		or die "oops: $!\n";

	if ($data->{error}) {
		print $data->{error};
		exit 1;
	}
	print $data->{ok}."\n\n";
	print "account:  $data->{created}{account}\n";
	print "password: $data->{created}{password}\n";
	exit 0;
}

if ($command eq 'curl') {
	my ($method, $url) = @ARGV;
	if (!$url) {
		$url = $method;
		$method = 'GET';
	}
	$method = uc($method);

	if ($method eq 'GET') {
		my $res = $ua->get("$VCB_API$url");
		print $res->as_string;
		print "\n";
		exit $res->is_success ? 0 : 1;
	}
	print STDERR "unsupported method '$method'...\n";
	exit 1;
}

if ($command eq 'bcrypt') {
	my $pw = shift @ARGV
		or die "USAGE: vcb bcrypt 'password'\n";

	my $bc = Digest->new(
		'Bcrypt',
		cost => $ENV{VCB_DIGEST_BCRYPT_COST} || 12, # in range (0,31)
		salt => rand_bits(16*8),                    # 16 octets
	);

	$bc->add($pw);
	print $bc->settings.'$'.$bc->hexdigest."\n";
	exit 0;
}

print STDERR "Unrecognized command: $command\n";
exit 2;
